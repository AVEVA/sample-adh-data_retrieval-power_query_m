let
    GetToken = (resource as text, clientId as text, clientSecret as text) as text =>
        let
            // split URL to avoid Power BI Service error regarding unsupported function Web.Contents
            authUrl = "/identity/connect/token",
            // Construct message for authentication
            escapedClientSecret = Uri.EscapeDataString(clientSecret),
            authPOSTBody = []
            & [
                grant_type = "client_credentials",
                client_id = clientId,
                scope = "ocsapi",
                client_secret = clientSecret
            ],
            authPOSTBodyBinary = Text.ToBinary(Uri.BuildQueryString(authPOSTBody)),
            // Authenticate
            GetJson =
                try
                    Web.Contents(
                        resource,
                        [
                            RelativePath = authUrl,
                            Headers = [
                                #"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8",
                                Accept = "application/json"
                            ],
                            IsRetry = true,
                            Content = authPOSTBodyBinary
                        ]
                    ),
            // Get token from the Json response
            FormatAsJson = Json.Document(GetJson[Value]),
            AccessToken = FormatAsJson[access_token],
            AccessTokenHeader = "bearer " & AccessToken
        in
            AccessTokenHeader,
    GetTokenType = type function (
        resource as (
            type text meta [
                Documentation.FieldCaption = "Resource",
                Documentation.FieldDescription = "Region Endpoint.",
                Documentation.SampleValues = {"https://uswe.datahub.connect.aveva.com"}
            ]
        ),
        clientId as (
            type text meta [
                Documentation.FieldCaption = "Client Id",
                Documentation.FieldDescription = "Client Credentials Client Id.",
                Documentation.SampleValues = {"Enter Client Id"}
            ]
        ),
        clientSecret as (
            type text meta [
                Documentation.FieldCaption = "Client Secret",
                Documentation.FieldDescription = "Client Credentials Client Secret.",
                Documentation.SampleValues = {"Enter Client Secret"}
            ]
        )
    ) as binary meta [
        Documentation.Name = "Get Token",
        Documentation.LongDescription = "Retrieves a token using Client Credentials flow.
            <br>
            <br> &nbsp &nbsp <b>Resource</b>: Region Endpoint.
            <br> &nbsp &nbsp <b>Client Id</b>: Client Credentials Client Identifier.
            <br> &nbsp &nbsp <b>Client Secret</b>: Client Credentials Client Secret."
    ]
in
    Value.ReplaceType(GetToken, GetTokenType)
